{"version":3,"sources":["StatsOutput.js","PlaylistSidebar.js","hash.js","App.js","serviceWorker.js","index.js"],"names":["StatsOutput","props","state","tracks","className","this","current","Component","PlaylistSidebar","selected","token","no_data","playlist_data","handleClick","bind","getTracks","id","setState","$","url","type","beforeSend","xhr","setRequestHeader","success","data","Array","from","playlists","map","i","onClick","key","name","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","scopes","App","getPlaylists","_token","access_token","items","href","join","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ee02506e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./StatsOutput.css\"\n\nclass StatsOutput extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      tracks: this.props.tracks\n    }\n  }\n\n  render() {\n    return(\n      <div className=\"StatsOutput\">\n        {this.props.current}\n      </div>\n    )\n  }\n}\n\nexport default StatsOutput;","import React, { Component } from \"react\";\nimport \"./PlaylistSidebar.css\";\nimport * as $ from \"jquery\";\nimport StatsOutput from \"./StatsOutput\";\n\nclass PlaylistSidebar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: null,\n      token: this.props.token,\n      no_data: false,\n      playlist_data: null\n    }\n  this.handleClick = this.handleClick.bind(this);\n  this.getTracks = this.getTracks.bind(this)\n  }\n\n  handleClick(id) {\n    this.setState({\n      selected: id\n    })\n    this.getTracks(id)\n  }\n\n  getTracks(id) {\n    $.ajax({\n      url: \"https://api.spotify.com/v1/playlists/\" + id,\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.state.token);\n      },\n      success: (data) => {\n        if (!data) {\n          this.setState({\n            no_data: true\n          });\n          return;\n        }\n        this.setState({\n          playlist_data: data\n        })\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"PlaylistSidebar\">\n          <ul>\n            {Array.from(this.props.playlists).map( i => (\n            <li onClick={() => this.handleClick(i.id)} className=\"playlist_item\" key={i.id}>{i.name}</li>\n            ))}\n          </ul>\n        </div>\n        {this.state.selected && <StatsOutput current={this.state.selected} tracks={this.state.playlist_data}/>}\n      </div>\n    )\n  }\n}\n\nexport default PlaylistSidebar","const hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\n\nwindow.location.hash = \"\";\n\nexport default hash;","import React, { Component } from 'react';\nimport * as $ from \"jquery\";\nimport PlaylistSidebar from \"./PlaylistSidebar\"\nimport hash from \"./hash\";\nimport './App.css';\n\nexport const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\nconst clientId = \"308136625304484d92879d69e98ccd89\";\nconst redirectUri = \"http://leesgrey.github.io/musichar\";\nconst scopes = [\n  \"ugc-image-upload\",\n  \"user-read-recently-played\",\n  \"playlist-read-collaborative\",\n  \"playlist-modify-private\",\n  \"playlist-modify-public\",\n  \"playlist-read-private\"\n]\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n      playlists: [],\n      no_data: false\n    }\n    this.getPlaylists = this.getPlaylists.bind(this);\n  }\n\n  componentDidMount() {\n    let _token = hash.access_token;\n    if (_token) {\n      this.setState({\n        token: _token\n      });\n      this.getPlaylists(_token);\n    }\n  }\n\n  getPlaylists(token) {\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/playlists?limit=50\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: (data) => {\n        if (!data) {\n          this.setState({\n            no_data: true\n          });\n          return;\n        }\n        this.setState({\n          playlists: data.items\n        })\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {!this.state.token && (\n            <a\n              className=\"btn btn--loginApp-link\"\n              href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`}\n              >\n              Login to Spotify\n            </a>\n          )}\n          {this.state.token && (\n            <PlaylistSidebar token={this.state.token} playlists={this.state.playlists}/>\n          )}\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}