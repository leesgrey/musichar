{"version":3,"sources":["Stats.js","ModeDoughnut.js","StatsOutput.js","Calls.js","PlaylistSidebar.js","hash.js","App.js","serviceWorker.js","index.js"],"names":["iterate","stats","console","log","major","minor","track_features","audio_features","forEach","track","mode","ModeDoughnut","props","state","labels","datasets","data","backgroundColor","getState","bind","this","prevProps","setState","key","Component","StatsOutput","track_objects","storeTrackObjects","storeTrackFeatures","storeStats","getModeString","token","playlistId","callback","bleh","axios","get","headers","then","res","catch","error","tracks","objects","list","trackObjects","result","items","id","getTrackString","params","ids","calls","features","length","PlaylistSidebar","selected","no_data","handleClick","className","Array","from","playlists","map","i","onClick","name","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","scopes","App","setPlaylists","_token","access_token","href","join","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d3aae29a.chunk.js","sourcesContent":["export function iterate(stats){\n  console.log(\"iterate receives\")\n  console.log(stats)\n  let major = 0;\n  let minor = 0;\n  stats.track_features.audio_features.forEach(function(track){\n    if (track.mode){\n      major++;\n    }\n    else {\n      minor++;\n    }\n  })\n\n  let data = {\n    major: major,\n    minor: minor\n  }\n  return data\n}","import { Doughnut } from 'react-chartjs-2';\nimport React, { Component } from \"react\";\n\n\nclass ModeDoughnut extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      labels: ['major', 'minor'],\n      datasets: [{\n        data: [this.props.major, this.props.minor],\n        backgroundColor: ['#FF6384', '#36A2EB']\n      }]\n    }\n    this.getState = this.getState.bind(this);\n  }\n\n  getState(){\n    return({\n      labels: ['major', 'minor'],\n      datasets: [{\n        data: [this.props.major, this.props.minor],\n        backgroundColor: ['#FF6384', '#36A2EB']\n      }]\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props !== prevProps){\n      console.log(\"updating graph\")\n      console.log(this.props)\n      this.setState(this.getState())\n    }\n  }\n\n  render() {\n    return(\n      <Doughnut data={this.state} key={this.props.minor}/>\n    )\n  }\n}\n\nexport default ModeDoughnut;\n","import React, { Component } from \"react\";\nimport * as calls from './Calls.js';\nimport * as stats from './Stats.js';\nimport ModeDoughnut from './ModeDoughnut.js';\n\nclass StatsOutput extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      track_objects: [],\n      track_features: [],\n      stats: null\n    }\n    this.storeTrackObjects = this.storeTrackObjects.bind(this);\n    this.storeTrackFeatures = this.storeTrackFeatures.bind(this);\n    this.storeStats = this.storeStats.bind(this);\n    this.getModeString = this.getModeString.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.bleh !== prevProps.bleh){\n      console.log(\"Loading playlist stats\")\n      calls.getObjects(this.props.token, this.props.bleh, this.storeTrackObjects)\n    }\n  }\n\n  storeTrackObjects(tracks){\n    this.setState({\n      track_objects: tracks\n    })\n    console.log(\"Track objects set\")\n    calls.getFeatures(this.props.token, this.state.track_objects, this.storeTrackFeatures)\n  }\n\n  storeTrackFeatures(features){\n    this.setState({\n      track_features: features\n    })\n    console.log(\"Track features set\")\n    console.log(this.state)\n    this.storeStats();\n  }\n\n  storeStats(){\n    this.setState({\n      stats: stats.iterate(this.state)\n    })\n    console.log(\"stats stored\")\n    console.log(this.state)\n  }\n\n  getModeString() {\n    let result = \"This playlist is \"\n    if (this.state.stats.major == this.state.stats.minor) {\n      result += \"equally major and minor \"\n    }\n    else if (this.state.stats.major > this.state.stats.minor) {\n      result += \"mostly major \"\n    }\n    else {\n      result += \"mostly minor \"\n    }\n    return result;\n  }\n\n  render() {\n    return(\n      <div id=\"statsOutput\">\n        {!this.state.stats && (<h3>select a playlist to begin</h3>)}\n        {this.state.stats && (\n        <div id=\"infoContainer\">\n          <h3>{this.props.bleh}</h3>\n          <p>{this.getModeString()} with {this.state.stats.major} major song{this.state.stats.major != 1 && \"s\"} and {this.state.track_objects.items.length - this.state.stats.major} minor song{this.state.track_objects.items.length - this.state.stats.major != 1 && \"s\"}.</p>\n          <ModeDoughnut id={this.props.bleh} major={this.state.stats.major} minor={this.state.stats.minor}/>\n          <p>This playlist has an average popularity of x with a variance of x.</p>\n          <p>This playlist has an average valence of x with a variance of x.</p>\n          <p>This playlist features x artists.</p>\n        </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default StatsOutput;","import axios from 'axios';\n\nexport function getPlaylists(token, callback) {\n  axios.get('https://api.spotify.com/v1/me/playlists?limit=30', {\n    headers: {\n      'Authorization': 'Bearer ' + token\n    }\n  })\n  .then((res) => {\n    callback(res.data.items)\n  })\n  .catch((error) => {\n    console.error(error);\n  })\n}\n\nexport function getObjects(token, playlistId, callback) {\n  axios.get('https://api.spotify.com/v1/playlists/' + playlistId + '/tracks', {\n    headers: {\n      'Authorization': 'Bearer ' + token\n    }\n  })\n  .then((res) => {\n    callback(res.data)\n  })\n  .catch((error) => {\n    console.error(error);\n  })\n}\n\nfunction getTrackString(trackObjects) {\n  let result = \"\";\n  trackObjects.items.forEach(function(track) {\n    result += track.track.id + \",\"\n  })\n  return result;\n}\n\nexport function getFeatures(token, objects, callback) {\n  let list = getTrackString(objects);\n\n  axios.get('https://api.spotify.com/v1/audio-features', {\n    headers: {\n      'Authorization': 'Bearer ' + token\n    },\n    params: {\n      ids: list\n    }\n  })\n  .then((res) => {\n    callback(res.data)\n  })\n  .catch((error) => {\n    console.error(error)\n  })\n}\n","import React, { Component } from \"react\";\nimport StatsOutput from \"./StatsOutput.js\"\n\nclass PlaylistSidebar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: null,\n      token: this.props.token,\n      no_data: false,\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(id) {\n    this.setState({\n      selected: id\n    })\n    console.log(id);\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"sidebar\">\n          <ul>\n            {Array.from(this.props.playlists).map( i => (\n            <li onClick={() => this.handleClick(i.id)} className=\"playlist_item\" key={i.id}>{i.name}</li>\n            ))}\n          </ul>\n        </div>\n        <StatsOutput token={this.state.token} bleh={this.state.selected}/>\n      </div>\n    )\n  }\n}\n\nexport default PlaylistSidebar;","const hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\n\nwindow.location.hash = \"\";\n\nexport default hash;","import React, { Component } from 'react';\nimport PlaylistSidebar from \"./PlaylistSidebar\"\nimport hash from \"./hash\";\nimport './App.css';\nimport * as calls from \"./Calls.js\"\n\nexport const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\nconst clientId = \"308136625304484d92879d69e98ccd89\";\n\n//const redirectUri = \"http://localhost:3000\";\nconst redirectUri = \"http://leesgrey.github.io/musichar\";\nconst scopes = [\n  \"ugc-image-upload\",\n  \"user-read-recently-played\",\n  \"playlist-read-collaborative\",\n  \"playlist-modify-private\",\n  \"playlist-modify-public\",\n  \"playlist-read-private\"\n]\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      token: null,\n      playlists: [],\n      no_data: false\n    }\n    this.setPlaylists = this.setPlaylists.bind(this);\n  }\n\n  setPlaylists(data) {\n    this.setState({\n      playlists: data\n    })\n  }\n\n  componentDidMount() {\n    let _token = hash.access_token;\n    if (_token) {\n      this.setState({\n        token: _token\n      });\n    calls.getPlaylists(_token, this.setPlaylists);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {!this.state.token && (\n            <div id=\"landing\">\n              <h1>petalist</h1>\n              <p>generate spotify playlist statistics and a bouquet to take with you</p>\n              <a\n                className=\"btn btn--loginApp-link\"\n                href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`}\n                >\n                log into spotify\n              </a>\n            </div>\n          )}\n          {this.state.token && (\n            <div id=\"loginDisplay\">\n              <div id=\"header\">\n                <h1>petalist</h1>\n              </div>\n              <PlaylistSidebar token={this.state.token} playlists={this.state.playlists}/>\n            </div>\n          )}\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}